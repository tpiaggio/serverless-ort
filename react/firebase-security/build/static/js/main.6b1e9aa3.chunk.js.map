{"version":3,"sources":["pages/Login.jsx","components/TimesList.jsx","components/TimeForm.jsx","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","uiConfig","signInFlow","signInOptions","firebase","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","callbacks","signInSuccessWithAuthResult","firebaseAuth","TimesList","useState","times","setTimes","useEffect","unsubscribe","collection","where","currentUser","uid","onSnapshot","querySnapshot","newTimes","forEach","doc","push","id","data","map","time","key","className","title","time_seconds","onClick","delete","TimeForm","setTitle","setTime","onSubmit","e","preventDefault","add","parseInt","user_id","then","type","value","onChange","currentTarget","Home","displayName","signOut","App","signedIn","setSignedIn","onAuthStateChanged","user","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","settings","host","ssl","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6RAyBeA,EArBD,WACZ,IAAMC,EAAW,CAEfC,WAAY,QAEZC,cAAe,CAACC,IAASC,KAAKC,mBAAmBC,YAAaH,IAASC,KAAKG,qBAAqBD,aACjGE,UAAW,CAETC,6BAA6B,IAIjC,OACE,oCACE,4CACA,8CACA,kBAAC,IAAD,CAAoBT,SAAUA,EAAUU,aAAcP,IAASC,W,QCwBtDO,EAzCG,WAAO,IAAD,EACIC,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,KAGtBC,qBAAU,WACR,IACMC,EADWb,cAAqBc,WAAW,SAASC,MAAM,UAAW,KAAMf,SAAgBgB,YAAYC,KAChFC,YAAW,SAACC,GACvC,IAAMC,EAAW,GACjBD,EAAcE,SAAQ,SAAUC,GAC9BF,EAASG,KAAT,aACEC,GAAIF,EAAIE,IACLF,EAAIG,YAGXd,EAASS,MAGX,OAAO,kBAAMP,OACZ,IAMH,OACE,6BACE,0CACA,4BACGH,EAAMgB,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKD,EAAKH,IACZ,yBAAKK,UAAU,cACZF,EAAKG,MACN,0BAAMD,UAAU,QAAQF,EAAKI,aAA7B,YACA,4BAAQC,QAAS,kBAbPR,EAa0BG,EAAKH,QAZnDxB,cAAqBc,WAAW,SAASQ,IAAIE,GAAIS,SAD9B,IAACT,IAaV,kBCKCU,EArCE,WAAO,IAAD,EACKzB,qBADL,mBACdqB,EADc,KACPK,EADO,OAEG1B,qBAFH,mBAEdkB,EAFc,KAERS,EAFQ,KAqBrB,OACE,0BAAMC,SAlBa,SAACC,GACpBA,EAAEC,iBAEFvC,cAEGc,WAAW,SACX0B,IAAI,CACHV,QACAC,aAAcU,SAASd,GACvBe,QAAS1C,SAAgBgB,YAAYC,MAEtC0B,MAAK,WACJR,EAAS,IACTC,EAAQ,SAMV,8CACA,6BACE,wCACA,2BAAOQ,KAAK,OAAOC,MAAOf,EAAOgB,SAAU,SAACR,GAAD,OAAOH,EAASG,EAAES,cAAcF,WAE7E,6BACE,uCACA,2BAAOD,KAAK,SAASC,MAAOlB,EAAMmB,SAAU,SAACR,GAAD,OAAOF,EAAQE,EAAES,cAAcF,WAE7E,oDChBSG,MAbf,WACE,OACE,oCACE,yBAAKnB,UAAU,UACb,wDAA8B7B,IAASC,OAAOe,YAAYiC,YAA1D,KACA,4BAAQjB,QAAS,kBAAMhC,IAASC,OAAOiD,YAAvC,aAEF,kBAAC,EAAD,MACA,kBAAC,EAAD,QCKSC,MAZf,WAAgB,IAAD,EACmB1C,oBAAS,GAD5B,mBACN2C,EADM,KACIC,EADJ,KASb,OANAzC,qBAAU,WACRZ,IAASC,OAAOqD,oBAAmB,SAACC,GAClCF,IAAcE,QAEf,IAEI,yBAAK1B,UAAU,OAAOuB,EAAW,kBAAC,EAAD,MAAW,kBAAC,EAAD,QCJjCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDN5D,gBAVqB,CACnB6D,OAAQ,0CACRC,WAAY,2BACZC,YAAa,kCACbC,UAAW,WACXC,cAAe,uBACfC,kBAAmB,eACnBC,MAAO,8CAKT,IAAIC,EAAKpE,cACwB,cAA7ByD,OAAOC,SAASC,UAClBS,EAAGC,SAAS,CACVC,KAAM,iBACNC,KAAK,IAITC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6b1e9aa3.chunk.js","sourcesContent":["import React from \"react\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase\";\n\nconst Login = () => {\n  const uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: \"popup\",\n    // We will display Google and Facebook as auth providers.\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.FacebookAuthProvider.PROVIDER_ID],\n    callbacks: {\n      // Avoid redirects after sign-in.\n      signInSuccessWithAuthResult: false,\n    },\n  };\n\n  return (\n    <>\n      <h1>Time Tracker</h1>\n      <p>Please sign-in:</p>\n      <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n    </>\n  );\n};\n\nexport default Login;\n","import React, { useState, useEffect } from \"react\";\nimport * as firebase from \"firebase\";\n\nconst TimesList = () => {\n  const [times, setTimes] = useState([]);\n\n  useEffect(() => {\n    const timesRef = firebase.firestore().collection(\"times\").where(\"user_id\", \"==\", firebase.auth().currentUser.uid);\n    const unsubscribe = timesRef.onSnapshot((querySnapshot) => {\n      const newTimes = [];\n      querySnapshot.forEach(function (doc) {\n        newTimes.push({\n          id: doc.id,\n          ...doc.data(),\n        });\n      });\n      setTimes(newTimes);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const handleDelete = (id) => {\n    firebase.firestore().collection(\"times\").doc(id).delete();\n  };\n\n  return (\n    <div>\n      <h2>Times List</h2>\n      <ol>\n        {times.map((time) => (\n          <li key={time.id}>\n            <div className=\"time-entry\">\n              {time.title}\n              <code className=\"time\">{time.time_seconds} seconds</code>\n              <button onClick={() => handleDelete(time.id)}>Delete</button>\n            </div>\n          </li>\n        ))}\n      </ol>\n    </div>\n  );\n};\n\nexport default TimesList;\n","import React, { useState } from \"react\";\nimport * as firebase from \"firebase\";\n\nconst TimeForm = () => {\n  const [title, setTitle] = useState();\n  const [time, setTime] = useState();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    firebase\n      .firestore()\n      .collection(\"times\")\n      .add({\n        title,\n        time_seconds: parseInt(time),\n        user_id: firebase.auth().currentUser.uid,\n      })\n      .then(() => {\n        setTitle(\"\");\n        setTime(\"\");\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h4>Add Time Entry</h4>\n      <div>\n        <label>Title</label>\n        <input type=\"text\" value={title} onChange={(e) => setTitle(e.currentTarget.value)} />\n      </div>\n      <div>\n        <label>Time</label>\n        <input type=\"number\" value={time} onChange={(e) => setTime(e.currentTarget.value)} />\n      </div>\n      <button>Add Time Entry</button>\n    </form>\n  );\n};\n\nexport default TimeForm;\n","import React from \"react\";\nimport firebase from \"firebase\";\n\nimport TimeList from \"../components/TimesList\";\nimport TimeForm from \"../components/TimeForm\";\n\nfunction Home() {\n  return (\n    <>\n      <div className=\"header\">\n        <h1>Welcome to Time Tracker, {firebase.auth().currentUser.displayName}!</h1>\n        <button onClick={() => firebase.auth().signOut()}>Sign-out</button>\n      </div>\n      <TimeList />\n      <TimeForm />\n    </>\n  );\n}\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport firebase from \"firebase\";\n\nimport Login from \"./pages/Login\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  const [signedIn, setSignedIn] = useState(false);\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      setSignedIn(!!user);\n    });\n  }, []);\n\n  return <div className=\"App\">{signedIn ? <Home /> : <Login />}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as firebase from \"firebase\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCB1O4T5llQ0u06pntaUyS7WLradNMNJOs\",\n  authDomain: \"asless-2.firebaseapp.com\",\n  databaseURL: \"https://asless-2.firebaseio.com\",\n  projectId: \"asless-2\",\n  storageBucket: \"asless-2.appspot.com\",\n  messagingSenderId: \"691794235890\",\n  appId: \"1:691794235890:web:41d339d20e554cf01adb6b\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nvar db = firebase.firestore();\nif (window.location.hostname === \"localhost\") {\n  db.settings({\n    host: \"localhost:8080\",\n    ssl: false,\n  });\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}